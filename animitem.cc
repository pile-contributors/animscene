/* ========================================================================= */
/* ------------------------------------------------------------------------- */
/*!
  file         animitem.cc
  date         December 2015
  author       Nicu Tofan

  brief        Contains the implementation for AnimItem class.

*//*

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Please read COPYING and README files in root folder
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
//
//
//
//
/*  INCLUDES    ------------------------------------------------------------ */

#include "animitem.h"
#include "animscene-private.h"

#include <QPainter>
#include <QGraphicsItem>

/*  INCLUDES    ============================================================ */
//
//
//
//
/*  DEFINITIONS    --------------------------------------------------------- */

/*  DEFINITIONS    ========================================================= */
//
//
//
//
/*  CLASS    --------------------------------------------------------------- */

/* ------------------------------------------------------------------   `   `   ``------- */
AnimItem::AnimItem (
        unsigned duration, AnimItem::KbAnimItem kb_tik,
        AnimItem::KbAnimItem kb_end, void * user_data, unsigned flags) :
    anim_scene_(NULL),
    total_duration_(duration),
    current_time_(0),
    anim_flags_(flags & ALL_ANIM_FLAGS),
    count_(1),
    kb_tik_(kb_tik),
    kb_end_(kb_end),
    user_data_(user_data)
{
}
/* ========================================================================= */

/* ------------------------------------------------------------------   `   `   ``------- */
AnimItem::~AnimItem ()
{
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
void AnimItem::animInstalled (AnimScene *scene)
{
    anim_scene_ = scene;

    if (runForever ()) {
        // in this case count_ actually tracks the number of
        // times the animation was restarted
        count_ = 0;
    }
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
void AnimItem::animationTick (unsigned interval)
{
    if (skipMe ())
        return;
    if (atEnd ())
        return;

    current_time_ += interval;

    if (kb_tik_ != NULL) {
        if (!kb_tik_(this, user_data_)) {
            setAnimFlag (SKIP_ME);
        }
    }

    // wrap back at the beginning.
    if (atEnd ()) {
        if (kb_end_ != NULL) {
            if (!kb_end_(this, user_data_)) {
                setAnimFlag (SKIP_ME);
            }
        }
        if (autoRestart()) {
            if (runForever ()) {
                ++count_;
                current_time_ = 0;
            } else if (count_ > 0) {
                --count_;
                current_time_ = 0;
            }
        }
    }
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
unsigned AnimItem::count() const
{
    return count_;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
void AnimItem::setCount (unsigned count)
{
    count_ = count;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
bool AnimItem::atVeryEnd() const
{
    if (runForever ())
        return false;
    if (!atEnd ())
        return false;
    return count_ == 0;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
double AnimItem::fractionDone () const
{
    if (atEnd ())
        return 1.0;
    else
        return
                static_cast<double>(current_time_) /
                static_cast<double>(total_duration_);
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
unsigned AnimItem::totalDuration() const
{
    return total_duration_;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
void AnimItem::setTotalDuration (unsigned value)
{
    total_duration_ = value;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
unsigned AnimItem::currentTime() const
{
    return current_time_;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */


/*  CLASS    =============================================================== */
//
//
//
//

/* ------------------------------------------------------------------------- */
/* ========================================================================= */

